#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.

CWD="`cd .;pwd`"
PROGNAME=setup-environment
export BSPDIR="$CWD"
TEMPLATECONF=${PWD}/sources/base/conf

if [ -z "$BASH_VERSION" ];then
    echo "This script must to be run from bash" >&2
    return 1
fi

usage()
{
    echo -e "
Usage: MACHINE=<machine> DISTRO=<distro> source $PROGNAME <build-dir>
Usage:                                   source $PROGNAME <build-dir>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory

The first usage is for creating a new build directory. In this case, the
script creates the build directory <build-dir>, configures it for the
specified <machine> and <distro>, and prepares the calling shell for running
bitbake on the build directory.

The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.
"

    shopt -q nullglob && nullglob=false || nullglob=true
    $nullglob && shopt -s nullglob
    echo -e "
Supported machines: `echo; find sources/ -path '*/conf/machine/*.conf' | \
sed 's:^.*/:\t:;s/\.conf//' | sort`

Supported distros: `echo; find sources/ -path '*/conf/distro/*.conf' | \
sed 's:^.*/:\t:;s/\.conf//' | sort`

To build for a machine listed above, run this script as:
DISTRO=<distro> MACHINE=<machine> source $PROGNAME <build-dir>
"
    $nullglob && shopt -u nullglob
    return
    cat << EOF
No machine configuration files found!
Make sure, to set up your yocto source directory with:
    repo init -u git@github.com:karo-electronics/karo-manifest -b master
    repo sync
EOF
    $nullglob && shopt -u nullglob
    return 1
}

clean_up()
{
   unset EULA LIST_MACHINES VALID_MACHINE
   unset CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
}

get_timezone() {
    local tz
    if [ -s /etc/timezone ];then
        tz="`cat /etc/timezone`"
    elif [ -s /etc/localtime ];then
        tz="`readlink /etc/localtime`"
        tz="${tz#*zoneinfo/}"
    fi
    echo "$tz"
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use yocto as root! Exiting..."
    return 1
fi

if [ ! -e "$1/conf/local.conf.sample" ]; then
    build_dir_setup_enabled=true
else
    build_dir_setup_enabled=false
fi

if $build_dir_setup_enabled;then
    if [ -z "$MACHINE" ];then
        usage
        echo -e "ERROR: You must set MACHINE when creating a new build directory."
        clean_up
        return 1
    fi
    if [ -z "$DISTRO" ]; then
        usage
        echo -e "ERROR: You must set DISTRO when creating a new build directory."
        clean_up
        return 1
    fi

    # Check the machine type specified
    LIST_MACHINES=`find sources/ -path '*/conf/machine/*.conf'`
    VALID_MACHINE=`echo "$LIST_MACHINES" | grep "/${MACHINE}.conf$" | wc -l`
    if [ "$MACHINE" = "" ] || [ "$VALID_MACHINE" = "0" ]; then
        echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
        usage && clean_up
        return 1
    fi
    if [ ! -e "$1/conf/local.conf.sample" ]; then
        echo "Configuring for ${MACHINE}"
    fi

    FSL_EULA_FILE="${FSL_EULA_FILE:-$CWD/sources/meta-freescale/EULA}"
    if [ ! -e "$FSL_EULA_FILE" ]; then
        echo -e "ERROR: EULA not found at $FSL_EULA_FILE."
        clean_up
    fi

    if [ -z "$DISTRO" ]; then
        DISTRO="fsl-imx-wayland"
    fi
    shopt -q nullglob && nullglob=false || nullglob=true
    $nullglob && shopt -s nullglob
    distro_dirs="`find sources -path "*/conf/distro/${DISTRO}.conf" -printf "%h\n"`"
    if [ -z "$distro_dirs" ];then
        echo "Unsupported distro: '$DISTRO'" >&2
        usage && clean_up
        return 1
    fi
    bitbake_target=""
    for d in $distro_dirs;do
        dir="`dirname "${d}"`/../recipes-core/images"
        [ -d "$dir" ] || continue
        distro_images="`cd "$dir" && ls *.bb`"
        bitbake_target="${bitbake_target} ${distro_images//.bb/ }"
    done
    for t in $bitbake_target;do
        if [ "${t/-image/}" = "${DISTRO}" ];then
            bitbake_target="$t"
            break
        fi
        if [ "$DISTRO" = "karo-wayland" ];then
            bitbake_target="karo-image-weston karo-image-6 karo-image-ml"
        fi
        if [ "$DISTRO" = "karo-xwayland" ];then
            bitbake_target="karo-image-weston karo-image-qt6 karo-image-ml karo-image-basler"
        fi
    done
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE=`uname -m`
fi

OEROOT=$PWD/sources/poky
if [ -e $PWD/sources/oe-core ]; then
    OEROOT=$PWD/sources/oe-core
fi

# Ensure all files in sources/base are kept in sync with project root
updated=false
for f in "$CWD/sources/base/"*; do
    [ -f "$f" ] || continue
    file="$(basename $f)"
    if echo "$file" | grep -q '~$'; then
        continue
    fi

    if ! cmp -s "$file" "$f"; then
        updated=true
        [ -e "$file" ] && chmod u+w "$file"
        cp "$f" "$file"
    fi
done
$nullglob && shopt -u nullglob
if $updated; then
    echo "The project root content has been updated. Please run '$PROGNAME' again."
    return
fi

. $OEROOT/oe-init-build-env "$CWD/$1" > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if $build_dir_setup_enabled; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/base/conf 
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf

    if [ "$DISTRO" = "karo-minimal" ];then
        echo 'EXTRA_IMAGE_FEATURES += "read-only-rootfs"' >> conf/local.conf
    fi
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i conf/local.conf

    if [ -z "$DEFAULT_TIMEZONE" ];then
        DEFAULT_TIMEZONE="`get_timezone`"
    fi
    if [ -n "$DEFAULT_TIMEZONE" ] && ! grep -q 'DEFAULT_TIMEZONE = ' conf/local.conf;then
        cat <<EOF >> conf/local.conf
DEFAULT_TIMEZONE = "$DEFAULT_TIMEZONE"
EOF
    fi
    cp $TEMPLATES/* conf/

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

# Handle EULA setting
EULA_ACCEPTED=

# EULA has been accepted already (ACCEPT_FSL_EULA is set in local.conf)
if grep -q '^\s*ACCEPT_FSL_EULA\s*=\s*["'\'']..*["'\'']' conf/local.conf; then
    EULA_ACCEPTED=1
fi

if [ -z "$EULA_ACCEPTED" ] && [ -n "$EULA" ]; then
    # The FSL EULA is not set as accepted in local.conf, but the EULA
    # variable is set in the environment, so we just configure
    # ACCEPT_FSL_EULA in local.conf according to $EULA.
    echo "ACCEPT_FSL_EULA = \"$EULA\"" >> conf/local.conf
elif [ -n "$EULA_ACCEPTED" ]; then
    # The FSL EULA has been accepted once, so ACCEPT_FSL_EULA is set
    # in local.conf.  No need to do anything.
    :
else
    # THE FSL EULA is not set as accepted in local.conf, and EULA is
    # not set in the environment, so we need to ask user if he/she
    # accepts the FSL EULA:
    cat <<EOF

Some BSPs depend on libraries and packages which are covered by Freescale's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...

EOF

    sleep 4

    more -d "$FSL_EULA_FILE"
    echo
    REPLY=
    while [ -z "$REPLY" ]; do
        echo -n "Do you accept the EULA you just read? (y/n) "
        read REPLY
        case "$REPLY" in
            y|Y)
            echo "EULA has been accepted."
            echo "ACCEPT_FSL_EULA = \"1\"" >> conf/local.conf
            EULA=1
            ;;
            n|N)
            echo "EULA has not been accepted."
            ;;
            *)
            REPLY=
            ;;
        esac
    done
fi

cat <<EOF

Welcome to Ka-Ro electronics TX and QS module BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    https://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    https://www.openembedded.org/

For a Ka-Ro specific Yocto guide please refer to:
    "Getting Started" > "Yocto Guide" in the respective TX module page on
    https://www.karo-electronics.com
${bitbake_target:+\
You can start your build now with:\
$(for i in ${bitbake_target:-core-image-minimal};do \
    echo -ne "\n    bitbake $i"; \
done )}

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
    EULA=$EULA
EOF
else
    echo "Your configuration files at $1 have not been touched."
fi

clean_up
